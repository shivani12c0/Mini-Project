from google.colab import drive
drive.mount('/content/drive')

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # data visualization
import seaborn as sns # statistical data visualization
%matplotlib inline
import os


import pandas as pd
# Assuming 'data' is a file path to a CSV file
data = "/content/drive/MyDrive/AutoTitleCraft.csv"
df = pd.read_csv(data)

import warnings
warnings.filterwarnings('ignore')

# When reading the data, specify index_col=False
df = pd.read_csv(data, index_col=False)

# Drop the last column (axis=1 indicates a column)
df = df.iloc[:, :-1]

df.shape #display number of rows and columns

df.head()  #display top 5 lines of given data

df.head()

df.info()

col_names = ['S.No','User_Text','Summary','Keywords','Relevance-0/1']
for col in col_names:
print(df[col].value_counts())


df['Relevance-0/1'].value_counts()

df.isnull().sum()

X = df.drop(['Relevance-0/1'], axis=1)
y = df['Relevance-0/1']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.305, random_state = 42)

X_train.shape, X_test.shape

X_train.dtypes

X_train.head()

pip install category_encoders

import category_encoders as ce

encoder = ce.OrdinalEncoder(cols=['S.No','User_Text','Summary','Keywords'])
X_train = encoder.fit_transform(X_train)
X_test = encoder.transform(X_test)

X_train.head()

X_test.head()

from sklearn.ensemble import RandomForestClassifier
# instantiate the classifier
rfc = RandomForestClassifier(random_state=0)
# fit the model
rfc.fit(X_train, y_train)
# Predict the Test set results
y_pred = rfc.predict(X_test)
# Check accuracy score
from sklearn.metrics import accuracy_score
print('Model accuracy : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# instantiate the classifier with n_estimators = 100
rfc_100 = RandomForestClassifier(n_estimators=100, random_state=0)
# fit the model to the training set
rfc_100.fit(X_train, y_train)
# Predict on the test set results
y_pred_100 = rfc_100.predict(X_test)
# Check accuracy score
print('Model accuracy score with 100 decision-trees : {0:0.4f}'. format(accuracy_score(y_test, y_pred_100)))





o/p=0.60
